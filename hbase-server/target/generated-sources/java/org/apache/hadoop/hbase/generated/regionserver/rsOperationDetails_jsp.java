/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.regionserver;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.List;
import java.util.Collections;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.StringUtils;
import org.apache.hadoop.hbase.regionserver.HRegionServer;
import org.apache.hadoop.hbase.HConstants;
import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;
import org.apache.hadoop.hbase.namequeues.NamedQueueRecorder;
import org.apache.hadoop.hbase.namequeues.RpcLogDetails;
import org.apache.hadoop.hbase.namequeues.request.NamedQueueGetRequest;
import org.apache.hadoop.hbase.namequeues.response.NamedQueueGetResponse;
import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.SlowLogResponseRequest;
import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.SlowLogResponseRequest.LogType;

public final class rsOperationDetails_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(19);
    _jspx_imports_classes.add("org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.namequeues.RpcLogDetails");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.namequeues.request.NamedQueueGetRequest");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.SlowLogResponseRequest");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.regionserver.HRegionServer");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.HConstants");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.namequeues.response.NamedQueueGetResponse");
    _jspx_imports_classes.add("org.apache.hadoop.util.StringUtils");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.namequeues.NamedQueueRecorder");
    _jspx_imports_classes.add("org.apache.hadoop.conf.Configuration");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.SlowLogResponseRequest.LogType");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

  HRegionServer rs = (HRegionServer) getServletContext().getAttribute(HRegionServer.REGIONSERVER);
  List<TooSlowLog.SlowLogPayload> slowLogs = Collections.emptyList();
  List<TooSlowLog.SlowLogPayload> largeLogs = Collections.emptyList();
  Configuration conf = rs.getConfiguration();
  boolean isSlowLogEnabled = conf.getBoolean(HConstants.SLOW_LOG_BUFFER_ENABLED_KEY, false);

  if(rs.isOnline() && isSlowLogEnabled) {
    NamedQueueRecorder namedQueueRecorder = rs.getNamedQueueRecorder();

    NamedQueueGetRequest slowRequest = new NamedQueueGetRequest();
    slowRequest.setNamedQueueEvent(RpcLogDetails.SLOW_LOG_EVENT);
    slowRequest.setSlowLogResponseRequest(SlowLogResponseRequest.newBuilder()
      .setLogType(LogType.SLOW_LOG)
      .setLimit(Integer.MAX_VALUE)
      .build());
    NamedQueueGetResponse slowResponse =
      namedQueueRecorder.getNamedQueueRecords(slowRequest);
    slowLogs = slowResponse.getSlowLogPayloads();


    NamedQueueGetRequest largeRequest = new NamedQueueGetRequest();
    largeRequest.setNamedQueueEvent(RpcLogDetails.SLOW_LOG_EVENT);
    largeRequest.setSlowLogResponseRequest(SlowLogResponseRequest.newBuilder()
      .setLogType(LogType.LARGE_LOG)
      .setLimit(Integer.MAX_VALUE)
      .build());
    NamedQueueGetResponse largeResponse =
      namedQueueRecorder.getNamedQueueRecords(largeRequest);
    largeLogs = largeResponse.getSlowLogPayloads();
  }

      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n    <h1>Operations Details</h1>\n    <p>HBase uses some fixed-size ring buffers to maintain rolling window history of specific server-side operation details.\n    This page list all operation details retrieve from these ring buffers</p>\n    </div>\n  </div>\n<div class=\"tabbable\">\n  <ul class=\"nav nav-pills\">\n    <li class=\"active\">\n      <a href=\"#tab_named_queue1\" data-toggle=\"tab\"> Slow RPCs </a>\n    </li>\n    <li class=\"\">\n      <a href=\"#tab_named_queue2\" data-toggle=\"tab\"> Large Response RPCs </a>\n    </li>\n  </ul>\n    <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n      <div class=\"tab-pane active\" id=\"tab_named_queue1\">\n      <p>Slow RPCs record those RPCs whose processing time is greater than the threshold (see the setting 'hbase.ipc.warn.response.time' for details)</p>\n        <table class=\"table table-striped\" style=\"white-space:nowrap\">\n        <tr>\n            <th>Start Time</th>\n");
      out.write("            <th>Processing Time</th>\n            <th>Queue Time</th>\n            <th>Response Size</th>\n            <th>Client Address</th>\n            <th>Server Class</th>\n            <th>Method Name</th>\n            <th>Region Name</th>\n            <th>User Name</th>\n            <th>MultiGets Count</th>\n            <th>MultiMutations Count</th>\n            <th>MultiService Calls</th>\n            <th>Call Details</th>\n            <th>Param</th>\n          </tr>\n          ");
 if (slowLogs != null && !slowLogs.isEmpty()) {
      out.write("\n            ");
 for (TooSlowLog.SlowLogPayload r : slowLogs) { 
      out.write("\n            <tr>\n             <td>");
      out.print(new Date(r.getStartTime() + 1800*1000));
      out.write("</td>\n             <td>");
      out.print(r.getProcessingTime());
      out.write("ms</td>\n             <td>");
      out.print(r.getQueueTime());
      out.write("ms</td>\n             <td>");
      out.print(StringUtils.byteDesc(r.getResponseSize()));
      out.write("</td>\n             <td>");
      out.print(r.getClientAddress());
      out.write("</td>\n             <td>");
      out.print(r.getServerClass());
      out.write("</td>\n             <td>");
      out.print(r.getMethodName());
      out.write("</td>\n             <td>");
      out.print(r.getRegionName());
      out.write("</td>\n             <td>");
      out.print(r.getUserName());
      out.write("</td>\n             <td>");
      out.print(r.getMultiGets());
      out.write("</td>\n             <td>");
      out.print(r.getMultiMutations());
      out.write("</td>\n             <td>");
      out.print(r.getMultiServiceCalls());
      out.write("</td>\n             <td>");
      out.print(r.getCallDetails());
      out.write("</td>\n             <td>");
      out.print(r.getParam());
      out.write("</td>\n            </tr>\n            ");
 } 
      out.write("\n          ");
 } 
      out.write("\n          </table>\n      </div>\n      <div class=\"tab-pane\" id=\"tab_named_queue2\">\n        <p>Large response RPCs record those RPCs whose returned data size is greater than the threshold (see the setting'hbase.ipc.warn.response.size' for details)</p>\n          <table class=\"table table-striped\" style=\"white-space:nowrap\">\n          <tr>\n            <th>Start Time</th>\n            <th>Processing Time</th>\n            <th>Queue Time</th>\n            <th>Response Size</th>\n            <th>Client Address</th>\n            <th>Server Class</th>\n            <th>Method Name</th>\n            <th>Region Name</th>\n            <th>User Name</th>\n            <th>MultiGets Count</th>\n            <th>MultiMutations Count</th>\n            <th>MultiService Calls</th>\n            <th>Call Details</th>\n            <th>Param</th>\n          </tr>\n          ");
 if (largeLogs != null && !largeLogs.isEmpty()) {
      out.write("\n            ");
 for (TooSlowLog.SlowLogPayload r : largeLogs) { 
      out.write("\n            <tr>\n             <td>");
      out.print(new Date(r.getStartTime() + 1800*1000));
      out.write("</td>\n             <td>");
      out.print(r.getProcessingTime());
      out.write("ms</td>\n             <td>");
      out.print(r.getQueueTime());
      out.write("ms</td>\n             <td>");
      out.print(StringUtils.byteDesc(r.getResponseSize()));
      out.write("</td>\n             <td>");
      out.print(r.getClientAddress());
      out.write("</td>\n             <td>");
      out.print(r.getServerClass());
      out.write("</td>\n             <td>");
      out.print(r.getMethodName());
      out.write("</td>\n             <td>");
      out.print(r.getRegionName());
      out.write("</td>\n             <td>");
      out.print(r.getUserName());
      out.write("</td>\n             <td>");
      out.print(r.getMultiGets());
      out.write("</td>\n             <td>");
      out.print(r.getMultiMutations());
      out.write("</td>\n             <td>");
      out.print(r.getMultiServiceCalls());
      out.write("</td>\n             <td>");
      out.print(r.getCallDetails());
      out.write("</td>\n             <td>");
      out.print(r.getParam());
      out.write("</td>\n            </tr>\n            ");
 } 
      out.write("\n          ");
 } 
      out.write("\n          </table>\n      </div>\n  </div>\n</div>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
