/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.concurrent.TimeUnit;
import java.util.ArrayList;
import java.util.List;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.hbase.quotas.MasterQuotaManager;
import org.apache.hadoop.hbase.quotas.QuotaRetriever;
import org.apache.hadoop.hbase.quotas.QuotaSettings;
import org.apache.hadoop.hbase.quotas.ThrottleSettings;

public final class quotas_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(12);
    _jspx_imports_classes.add("java.util.concurrent.TimeUnit");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.quotas.QuotaRetriever");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.quotas.QuotaSettings");
    _jspx_imports_classes.add("org.apache.hadoop.conf.Configuration");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.quotas.ThrottleSettings");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.HMaster");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.quotas.MasterQuotaManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

  HMaster master = (HMaster) getServletContext().getAttribute(HMaster.MASTER);
  pageContext.setAttribute("pageTitle", "HBase Master Quotas: " + master.getServerName());
  List<ThrottleSettings> regionServerThrottles = new ArrayList<>();
  List<ThrottleSettings> namespaceThrottles = new ArrayList<>();
  List<ThrottleSettings> userThrottles = new ArrayList<>();
  MasterQuotaManager quotaManager = master.getMasterQuotaManager();
  boolean exceedThrottleQuotaEnabled = false;
  if (quotaManager != null) {
    exceedThrottleQuotaEnabled = quotaManager.isExceedThrottleQuotaEnabled();
    try (QuotaRetriever scanner = new QuotaRetriever(master.getConnection())) {
      for (QuotaSettings quota : scanner) {
        if (quota instanceof ThrottleSettings) {
          ThrottleSettings throttle = (ThrottleSettings) quota;
          if (throttle.getUserName() != null) {
            userThrottles.add(throttle);
          } else if (throttle.getNamespace() != null) {
            namespaceThrottles.add(throttle);
          } else if (throttle.getRegionServer() != null) {
            regionServerThrottles.add(throttle);
          }
        }
      }
    }
  }

      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h1>Throttle Quotas</h1>\n    </div>\n  </div>\n</div>\n\n");
if (quotaManager != null) {
      out.write("\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h2>Rpc Throttle Enabled</h2>\n    </div>\n  </div>\n  ");
if (quotaManager.isRpcThrottleEnabled()) {
      out.write("\n  <div class=\"alert alert-success\">\n    Rpc throttle is enabled.\n  </div>\n  ");
 } else {
      out.write("\n  <div class=\"alert alert-info\">\n    Rpc throttle is disabled. All requests will not be throttled.<br/>\n    Use 'enable_rpc_throttle' shell command to enable it.\n  </div>\n  ");
 } 
      out.write("\n</div>\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h2>Exceed Throttle Quota Enabled</h2>\n    </div>\n  </div>\n  ");
if (exceedThrottleQuotaEnabled) {
      out.write("\n  <div class=\"alert alert-success\">\n    Exceed throttle quota is enabled. The user/table/namespace throttle quotas can exceed the limit\n    if a region server has available quotas.<br/>\n    Use 'disable_exceed_throttle_quota' shell command to disable it.\n  </div>\n  ");
 } else {
      out.write("\n  <div class=\"alert alert-info\">\n    Exceed throttle quota is disabled.\n  </div>\n  ");
 } 
      out.write("\n</div>\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h2>RegionServer Throttle Quotas</h2>\n    </div>\n  </div>\n");

  if (regionServerThrottles.size() > 0) {

      out.write("\n  <table class=\"table table-striped\" width=\"90%\" >\n    <tr>\n      <th>RegionServer</th>\n      <th>Limit</th>\n      <th>Type</th>\n      <th>TimeUnit</th>\n      <th>Scope</th>\n    </tr>\n    ");
 for (ThrottleSettings throttle : regionServerThrottles) { 
      out.write("\n      <tr>\n        <td>");
      out.print( throttle.getRegionServer() == null ? "" : throttle.getRegionServer() );
      out.write("</td>\n        <td>");
      out.print( throttle.getSoftLimit() );
      out.write("</td>\n        <td>");
      out.print( throttle.getThrottleType() );
      out.write("</td>\n        <td>");
      out.print( throttle.getTimeUnit() );
      out.write("</td>\n        <td>");
      out.print( throttle.getQuotaScope() );
      out.write("</td>\n        ");
 if (exceedThrottleQuotaEnabled && throttle.getTimeUnit() != null && throttle.getTimeUnit() != TimeUnit.SECONDS) { 
      out.write("\n        <td style=\"color:red;\">Exceed throttle quota is enabled, but RegionServer throttle is not in SECONDS time unit.</td>\n        ");
 }
      out.write("\n      </tr>\n    ");
 } 
      out.write("\n  </table>\n  ");
 } else if (exceedThrottleQuotaEnabled) { 
      out.write("\n  <div class=\"alert alert-danger\">\n    Exceed throttle quota is enabled, but RegionServer throttle quotas are not set.<br/>\n    Please set RegionServer read and write throttle quotas in SECONDS time unit.<br/>\n    eg. set_quota TYPE => THROTTLE, REGIONSERVER => 'all', THROTTLE_TYPE => WRITE, LIMIT => '20000req/sec'\n  </div>\n  ");
}
      out.write("\n</div>\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h2>Namespace Throttle Quotas</h2>\n    </div>\n  </div>\n  ");

    if (namespaceThrottles.size() > 0) {
  
      out.write("\n  <table class=\"table table-striped\" width=\"90%\" >\n    <tr>\n      <th>Namespace</th>\n      <th>Limit</th>\n      <th>Type</th>\n      <th>TimeUnit</th>\n      <th>Scope</th>\n    </tr>\n    ");
 for (ThrottleSettings throttle : namespaceThrottles) { 
      out.write("\n    <tr>\n      <td>");
      out.print( throttle.getNamespace() == null ? "" : throttle.getNamespace() );
      out.write("</td>\n      <td>");
      out.print( throttle.getSoftLimit() );
      out.write("</td>\n      <td>");
      out.print( throttle.getThrottleType() );
      out.write("</td>\n      <td>");
      out.print( throttle.getTimeUnit() );
      out.write("</td>\n      <td>");
      out.print( throttle.getQuotaScope() );
      out.write("</td>\n    </tr>\n    ");
 } 
      out.write("\n  </table>\n  ");
 } 
      out.write("\n</div>\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h2>User Throttle Quotas</h2>\n    </div>\n  </div>\n  ");

    if (userThrottles.size() > 0) {
  
      out.write("\n  <table class=\"table table-striped\" width=\"90%\" >\n    <tr>\n      <th>User</th>\n      <th>Namespace</th>\n      <th>Table</th>\n      <th>Limit</th>\n      <th>Type</th>\n      <th>TimeUnit</th>\n      <th>Scope</th>\n    </tr>\n    ");
 for (ThrottleSettings throttle : userThrottles) { 
      out.write("\n    <tr>\n      <td>");
      out.print( throttle.getUserName() == null ? "" : throttle.getUserName() );
      out.write("</td>\n      <td>");
      out.print( throttle.getNamespace() == null ? "" : throttle.getNamespace() );
      out.write("</td>\n      <td>");
      out.print( throttle.getTableName() == null ? "" : throttle.getTableName() );
      out.write("</td>\n      <td>");
      out.print( throttle.getSoftLimit() );
      out.write("</td>\n      <td>");
      out.print( throttle.getThrottleType() );
      out.write("</td>\n      <td>");
      out.print( throttle.getTimeUnit() );
      out.write("</td>\n      <td>");
      out.print( throttle.getQuotaScope() );
      out.write("</td>\n    </tr>\n    ");
 } 
      out.write("\n  </table>\n  ");
 } 
      out.write("\n</div>\n\n");
 } 
      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
