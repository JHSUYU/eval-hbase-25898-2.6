/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.hbase.snapshot.SnapshotInfo;
import org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils;
import org.apache.hadoop.hbase.TableName;
import org.apache.hadoop.util.StringUtils;
import org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription;
import org.apache.hadoop.hbase.util.PrettyPrinter;

public final class snapshotsStats_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(18);
    _jspx_imports_classes.add("org.apache.hadoop.hbase.snapshot.SnapshotInfo");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.TableName");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.util.PrettyPrinter");
    _jspx_imports_classes.add("java.util.concurrent.atomic.AtomicLong");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.util.StringUtils");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.apache.hadoop.conf.Configuration");
    _jspx_imports_classes.add("org.apache.hadoop.fs.Path");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.snapshot.SnapshotDescriptionUtils");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.HMaster");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

  HMaster master = (HMaster)getServletContext().getAttribute(HMaster.MASTER);
  Configuration conf = master.getConfiguration();
  AtomicLong totalSharedSize = new AtomicLong();
  AtomicLong totalArchivedSize = new AtomicLong();
  AtomicLong totalMobSize = new AtomicLong();
  long totalSize = 0;
  long totalUnsharedArchivedSize = 0;

  Map<Path, Integer> filesMap = null;

  List<SnapshotDescription> snapshots = master.isInitialized() ?
    master.getSnapshotManager().getCompletedSnapshots() : null;

  if (snapshots != null && snapshots.size() > 0) {
    filesMap = SnapshotInfo.getSnapshotsFilesMap(master.getConfiguration(),
                   totalArchivedSize, totalSharedSize, totalMobSize);
    totalSize = totalSharedSize.get() + totalArchivedSize.get() + totalMobSize.get();
  }
  pageContext.setAttribute("pageTitle", "HBase Master Snapshots: " + master.getServerName());

      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n      <div class=\"page-header\">\n          <h1>Snapshot Storefile Stats</h1>\n      </div>\n  </div>\n  <table class=\"table table-striped\" width=\"90%\" >\n    <tr>\n        <th>Snapshot Name</th>\n        <th>Table</th>\n        <th>Creation Time</th>\n        <th>Owner</th>\n        <th>TTL</th>\n        <th>Expired</th>\n        <th>Shared Storefile Size</th>\n        <th>Mob Storefile Size</th>\n        <th>Archived Storefile Size</th>\n    </tr>\n    ");
for (SnapshotDescription snapshotDesc : snapshots) { 
      out.write("\n    <tr>\n      <td><a href=\"/snapshot.jsp?name=");
      out.print( snapshotDesc.getName() );
      out.write("\">\n        ");
      out.print( snapshotDesc.getName() );
      out.write("</a></td>\n      ");

        TableName snapshotTable = TableName.valueOf(snapshotDesc.getTable());
        SnapshotInfo.SnapshotStats stats = SnapshotInfo.getSnapshotStats(master.getConfiguration(),
          snapshotDesc, filesMap);
        totalUnsharedArchivedSize += stats.getNonSharedArchivedStoreFilesSize();
      
      out.write("\n      <td><a href=\"/table.jsp?name=");
      out.print( snapshotTable.getNameAsString() );
      out.write("\">\n        ");
      out.print( snapshotTable.getNameAsString() );
      out.write("</a></td>\n      <td>");
      out.print( new Date(snapshotDesc.getCreationTime()) );
      out.write("</td>\n      <td>");
      out.print( snapshotDesc.getOwner() );
      out.write("</td>\n      <td>\n        ");
 if (snapshotDesc.getTtl() == 0) { 
      out.write("\n        FOREVER\n        ");
 } else { 
      out.write("\n        ");
      out.print(PrettyPrinter
          .format(String.valueOf(snapshotDesc.getTtl()), PrettyPrinter.Unit.TIME_INTERVAL));
      out.write("\n        ");
 } 
      out.write("\n      </td>\n      <td>\n        ");
      out.print( SnapshotDescriptionUtils.isExpiredSnapshot(snapshotDesc.getTtl(), snapshotDesc.getCreationTime(), System.currentTimeMillis()) ? "Yes" : "No" );
      out.write("\n      </td>\n      <td>");
      out.print( StringUtils.humanReadableInt(stats.getSharedStoreFilesSize()) );
      out.write("</td>\n      <td>");
      out.print( StringUtils.humanReadableInt(stats.getMobStoreFilesSize())  );
      out.write("</td>\n      <td>");
      out.print( StringUtils.humanReadableInt(stats.getArchivedStoreFileSize()) );
      out.write("\n        (");
      out.print( StringUtils.humanReadableInt(stats.getNonSharedArchivedStoreFilesSize()) );
      out.write(")</td>\n    </tr>\n    ");
 } 
      out.write("\n    <p>");
      out.print( snapshots.size() );
      out.write(" snapshot(s) in set.</p>\n    <p>Total Storefile Size: ");
      out.print( StringUtils.humanReadableInt(totalSize) );
      out.write("</p>\n    <p>Total Shared Storefile Size: ");
      out.print( StringUtils.humanReadableInt(totalSharedSize.get()) );
      out.write(",\n       Total Mob Storefile Size: ");
      out.print( StringUtils.humanReadableInt(totalMobSize.get()) );
      out.write(",\n       Total Archived Storefile Size: ");
      out.print( StringUtils.humanReadableInt(totalArchivedSize.get()) );
      out.write("\n       (");
      out.print( StringUtils.humanReadableInt(totalUnsharedArchivedSize) );
      out.write(")</p>\n    <p>Shared Storefile Size is the Storefile size shared between snapshots and active tables.\n       Mob Storefile Size is the Mob Storefile size shared between snapshots and active tables.\n       Archived Storefile Size is the Storefile size in Archive.\n       The format of Archived Storefile Size is NNN(MMM). NNN is the total Storefile\n       size in Archive, MMM is the total Storefile size in Archive that is specific\n       to the snapshot (not shared with other snapshots and tables)</p>\n  </table>\n</div>\n\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
