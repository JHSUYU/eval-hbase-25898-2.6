/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.hbase.monitoring.MonitoredTask;
import org.apache.hadoop.hbase.monitoring.TaskGroup;

public final class startupProgress_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


  private static String printLatestJournals(MonitoredTask task, int count) {
    List<MonitoredTask.StatusJournalEntry> journal = task.getStatusJournal();
    if (journal == null) {
      return "";
    }
    int journalSize = journal.size();
    StringBuilder sb = new StringBuilder();
    int skips = journalSize - count;
    if (skips > 0) {
      sb.append("Current journal size is ").append(journalSize).append(", ");
      sb.append("skip the previous ones and show the latest ").append(count).append(" journals...");
      sb.append(" </br>");
    }
    Iterator<MonitoredTask.StatusJournalEntry> iter = journal.iterator();
    MonitoredTask.StatusJournalEntry previousEntry = null;
    int i = 0;
    while (iter.hasNext()) {
      MonitoredTask.StatusJournalEntry entry = iter.next();
      if (i >= skips) {
        sb.append(entry);
        if (previousEntry != null) {
          long delta = entry.getTimeStamp() - previousEntry.getTimeStamp();
          if (delta != 0) {
            sb.append(" (+").append(delta).append(" ms)");
          }
        }
        sb.append(" </br>");
        previousEntry = entry;
      }
      i++;
    }
    return sb.toString();
  }

  private static String getStartupStatusString(TaskGroup startupTaskGroup) {
      MonitoredTask.State currentState = startupTaskGroup.getState();
      if (currentState.equals(MonitoredTask.State.COMPLETE)) {
        return "Master initialized";
      } else if (currentState.equals(MonitoredTask.State.RUNNING) |
        currentState.equals(MonitoredTask.State.WAITING)) {
        return "Master initialize in progress";
      } else {
        return currentState.toString();
      }
   }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.monitoring.TaskGroup");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.monitoring.MonitoredTask");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.HMaster");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n\n\n\n");

  final HMaster master = (HMaster) getServletContext().getAttribute(HMaster.MASTER);

      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n\n<div class=\"container-fluid content\">\n  <div class=\"row inner_header\">\n    <div class=\"page-header\">\n      <h1>Startup Progress (\n      ");
 TaskGroup startupTaskGroup = master.getStartupProgress();
         if(startupTaskGroup != null){ 
      out.write("\n         ");
      out.print( getStartupStatusString(startupTaskGroup) );
      out.write("\n         ");
 } else { 
      out.write("\n         ");
      out.print( "");
      out.write("\n         ");
 } 
      out.write("\n      )</h1>\n    </div>\n  </div>\n\n  <table class=\"table table-striped\">\n    <tr>\n      <th>Task</th>\n      <th>Current State</th>\n      <th>Start Time</th>\n      <th>Last status Time</th>\n      <th>Elapsed Time(ms)</th>\n      <th>Journals</th>\n\n    </tr>\n    ");

    if(startupTaskGroup != null){
       for (MonitoredTask task : startupTaskGroup.getTasks()) { 
      out.write("\n    <tr>\n      <td>");
      out.print( task.getDescription() );
      out.write("</td>\n      <td>");
      out.print( task.getState().name() );
      out.write("</td>\n      <td>");
      out.print( new Date(task.getStartTime()) );
      out.write("</td>\n      <td>");
      out.print( new Date(task.getStatusTime()) );
      out.write("</td>\n      <td>");
      out.print( task.getStatusTime() - task.getStartTime() );
      out.write("</td>\n      <td>");
      out.print( printLatestJournals(task, 30) );
      out.write("</td>\n    </tr>\n    ");
 }
    } 
      out.write("\n\n  </table>\n\n</div>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
