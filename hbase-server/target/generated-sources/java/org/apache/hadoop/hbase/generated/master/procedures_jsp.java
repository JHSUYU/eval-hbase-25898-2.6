/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import static org.apache.commons.lang3.StringEscapeUtils.escapeXml;
import java.util.Collections;
import java.util.Comparator;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv;
import org.apache.hadoop.hbase.procedure2.LockedResource;
import org.apache.hadoop.hbase.procedure2.Procedure;
import org.apache.hadoop.hbase.procedure2.ProcedureExecutor;
import org.apache.hadoop.hbase.procedure2.util.StringUtils;
import org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
import org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure;
import org.apache.hadoop.hbase.master.assignment.TransitRegionStateProcedure;
import org.apache.hadoop.hbase.master.assignment.OpenRegionProcedure;
import org.apache.hadoop.hbase.master.assignment.CloseRegionProcedure;
import org.apache.hadoop.hbase.metrics.OperationMetrics;
import java.util.Map;
import java.util.HashMap;
import org.apache.hadoop.hbase.master.MetricsAssignmentManagerSource;
import org.apache.hadoop.hbase.master.MetricsAssignmentManager;
import org.apache.hadoop.hbase.procedure2.ProcedureMetrics;
import org.apache.hadoop.hbase.metrics.Snapshot;
import org.apache.hadoop.hbase.metrics.Histogram;
import java.util.TreeMap;
import org.apache.hadoop.hbase.metrics.impl.HistogramImpl;

public final class procedures_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(38);
    _jspx_imports_classes.add("org.apache.hadoop.hbase.procedure2.util.StringUtils");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.metrics.impl.HistogramImpl");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.procedure2.LockedResource");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.procedure2.ProcedureExecutor");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.assignment.OpenRegionProcedure");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.metrics.Histogram");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.MetricsAssignmentManager");
    _jspx_imports_classes.add("static org.apache.commons.lang3.StringEscapeUtils.escapeXml");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.procedure.MasterProcedureEnv");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.procedure2.Procedure");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.metrics.OperationMetrics");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.assignment.CloseRegionProcedure");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.MetricsAssignmentManagerSource");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.procedure2.ProcedureMetrics");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.assignment.TransitRegionStateProcedure");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.metrics.Snapshot");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure");
    _jspx_imports_classes.add("java.util.Comparator");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.HMaster");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write('\n');
      out.write('\n');

  HMaster master = (HMaster) getServletContext().getAttribute(HMaster.MASTER);
  if (!master.isInitialized()) {

      out.write("\n    <div class=\"container-fluid content\">\n      <div class=\"row inner_header\">\n        <div class=\"page-header\">\n          <h1>Master is initializing</h1>\n        </div>\n      </div>\n      <p><hr><p>\n      ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "redirect.jsp", out, false);
      out.write("\n    </div>\n");
  return;
  } 
      out.write('\n');
      out.write('\n');

  ProcedureExecutor<MasterProcedureEnv> procExecutor = master.getMasterProcedureExecutor();
  List<Procedure<MasterProcedureEnv>> procedures = procExecutor.getProcedures();
  Collections.sort(procedures, new Comparator<Procedure>() {
    @Override
    public int compare(Procedure lhs, Procedure rhs) {
      long cmp = lhs.getParentProcId() - rhs.getParentProcId();
      cmp = cmp != 0 ? cmp : lhs.getProcId() - rhs.getProcId();
      return cmp < 0 ? -1 : cmp > 0 ? 1 : 0;
    }
  });

  List<LockedResource> lockedResources = master.getLocks();
  pageContext.setAttribute("pageTitle", "HBase Master Procedures: " + master.getServerName());

      out.write("\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n      <h1>Procedure Time Statistics</h1>\n    </div>\n  </div>\n  <p>We list proceduces completed successfully of the following types only: ServerCrashProcedure, TransitRegionStateProcedure,\n    OpenRegionProcedure, CloseRegionProcedure.</p>\n  <table class=\"table table-striped\" width=\"90%\" >\n    <tr>\n      <th>Type</th>\n      <th>min(ms)</th>\n      <th>50-percentile(ms)</th>\n      <th>90-percentile(ms)</th>\n      <th>max(ms)</th>\n    </tr>\n    ");

      Map<String, ProcedureMetrics> latencyMetrics = new TreeMap<>();
      MetricsAssignmentManager metricsAssignmentManagerSource =
        procExecutor.getEnvironment().getAssignmentManager().getAssignmentManagerMetrics();
      latencyMetrics.put("OpenRegionProcedure", metricsAssignmentManagerSource.getOpenProcMetrics());
      latencyMetrics.put("CloseRegionProcedure", metricsAssignmentManagerSource.getCloseProcMetrics());
      latencyMetrics.put("TransitionRegionProcedure#assignRegion", metricsAssignmentManagerSource.getAssignProcMetrics());
      latencyMetrics.put("TransitionRegionProcedure#unassignRegion", metricsAssignmentManagerSource.getUnassignProcMetrics());
      latencyMetrics.put("TransitionRegionProcedure#moveRegion", metricsAssignmentManagerSource.getMoveProcMetrics());
      latencyMetrics.put("TransitionRegionProcedure#reopenRegion", metricsAssignmentManagerSource.getReopenProcMetrics());
      latencyMetrics.put("ServerCrashProcedure", master.getMasterMetrics().getServerCrashProcMetrics());

      double[] percentiles = new double[] { 0.5, 0.9};
      for (Map.Entry<String, ProcedureMetrics> e : latencyMetrics.entrySet()) {
        Histogram histogram = e.getValue().getTimeHisto();
        if (histogram.getCount() == 0 || !(histogram instanceof HistogramImpl)) {
          continue;
        }
        HistogramImpl histogramImpl = (HistogramImpl)histogram;
        long[] percentileLatencies = histogramImpl.getQuantiles(percentiles);

    
      out.write("\n    <tr>\n      <td>");
      out.print( e.getKey() );
      out.write("</td>\n      <td>");
      out.print( histogramImpl.getMin() );
      out.write("</td>\n      <td>");
      out.print( percentileLatencies[0] );
      out.write("</td>\n      <td>");
      out.print( percentileLatencies[1] );
      out.write("</td>\n      <td>");
      out.print( histogramImpl.getMax() );
      out.write("</td>\n    </tr>\n    ");
 } 
      out.write("\n  </table>\n</div>\n<br />\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n      <div class=\"page-header\">\n          <h1>Procedures</h1>\n      </div>\n  </div>\n  <p>We do not list procedures that have completed successfully; their number makes it hard to spot the problematics.</p>\n  <table class=\"table table-striped\" id=\"tab_Procedures\" width=\"90%\" >\n    <tr>\n        <th>Id</th>\n        <th>Parent</th>\n        <th>State</th>\n        <th>Owner</th>\n        <th>Type</th>\n        <th>Start Time</th>\n        <th>Last Update</th>\n        <th>Errors</th>\n        <th>Parameters</th>\n    </tr>\n    ");

      int displayCount = 0;
      for (Procedure<?> proc : procedures) {
      // Don't show SUCCESS procedures.
      if (proc.isSuccess()) {
        continue;
      }
      displayCount++;
    
      out.write("\n      <tr>\n        <td>");
      out.print( proc.getProcId() );
      out.write("</td>\n        <td>");
      out.print( proc.hasParent() ? proc.getParentProcId() : "" );
      out.write("</td>\n        <td>");
      out.print( escapeXml(proc.getState().toString() + (proc.isBypass() ? "(Bypass)" : "")) );
      out.write("</td>\n        <td>");
      out.print( proc.hasOwner() ? escapeXml(proc.getOwner()) : "" );
      out.write("</td>\n        <td>");
      out.print( escapeXml(proc.getProcName()) );
      out.write("</td>\n        <td>");
      out.print( new Date(proc.getSubmittedTime()) );
      out.write("</td>\n        <td>");
      out.print( new Date(proc.getLastUpdate()) );
      out.write("</td>\n        <td>");
      out.print( escapeXml(proc.isFailed() ? proc.getException().unwrapRemoteIOException().getMessage() : "") );
      out.write("</td>\n        <td>");
      out.print( escapeXml(proc.toString()) );
      out.write("</td>\n      </tr>\n    ");
 } 
      out.write("\n    ");

    if (displayCount > 0) {
    
      out.write("\n      <p>");
      out.print( displayCount );
      out.write(" procedure(s).</p>\n    ");

    }
    
      out.write("\n  </table>\n</div>\n<br />\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n      <div class=\"page-header\">\n          <h1>Locks</h1>\n      </div>\n  </div>\n    ");

    if (lockedResources.size() > 0) {
    
      out.write("\n    <p>");
      out.print( lockedResources.size() );
      out.write(" lock(s).</p>\n    ");

    }
    
      out.write('\n');
      out.write(' ');
      out.write(' ');
 for (LockedResource lockedResource : lockedResources) { 
      out.write("\n    <h2>");
      out.print( lockedResource.getResourceType() );
      out.write(':');
      out.write(' ');
      out.print( lockedResource.getResourceName() );
      out.write("</h2>\n    ");

      switch (lockedResource.getLockType()) {
      case EXCLUSIVE:
    
      out.write("\n    <p>Lock type: EXCLUSIVE</p>\n    <p>Owner procedure: ");
      out.print( escapeXml(lockedResource.getExclusiveLockOwnerProcedure().toStringDetails()) );
      out.write("</p>\n    ");

        break;
      case SHARED:
    
      out.write("\n    <p>Lock type: SHARED</p>\n    <p>Number of shared locks: ");
      out.print( lockedResource.getSharedLockCount() );
      out.write("</p>\n    ");

        break;
      }

      List<Procedure<?>> waitingProcedures = lockedResource.getWaitingProcedures();

      if (!waitingProcedures.isEmpty()) {
    
      out.write("\n        <h3>Waiting procedures</h3>\n        <table class=\"table table-striped\" width=\"90%\" >\n        ");
 for (Procedure<?> proc : procedures) { 
      out.write("\n         <tr>\n            <td>");
      out.print( escapeXml(proc.toStringDetails()) );
      out.write("</td>\n          </tr>\n        ");
 } 
      out.write("\n        </table>\n    ");
 } 
      out.write('\n');
      out.write(' ');
      out.write(' ');
 } 
      out.write("\n</div>\n<br />\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
