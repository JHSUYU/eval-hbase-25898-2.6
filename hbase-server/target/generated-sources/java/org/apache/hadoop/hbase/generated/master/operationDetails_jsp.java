/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat9
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.hadoop.hbase.generated.master;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.List;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hbase.client.Admin;
import org.apache.hadoop.hbase.master.HMaster;
import org.apache.hadoop.util.StringUtils;
import org.apache.hadoop.hbase.client.ServerType;
import org.apache.hadoop.hbase.client.LogEntry;
import org.apache.hadoop.hbase.client.BalancerRejection;
import org.apache.hadoop.hbase.client.BalancerDecision;

public final class operationDetails_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(14);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.client.Admin");
    _jspx_imports_classes.add("org.apache.hadoop.util.StringUtils");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("org.apache.hadoop.conf.Configuration");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.client.LogEntry");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.client.BalancerRejection");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.client.ServerType");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.master.HMaster");
    _jspx_imports_classes.add("org.apache.hadoop.hbase.client.BalancerDecision");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');

  HMaster master = (HMaster)getServletContext().getAttribute(HMaster.MASTER);
  Configuration conf = master.getConfiguration();

  List<BalancerRejection> logList = null;
  List<BalancerDecision> decisionList = null;
  if(master.isInitialized()) {
    try (Admin admin = master.getConnection().getAdmin()) {
      logList = (List<BalancerRejection>)(List<?>)admin.getLogEntries(null, "BALANCER_REJECTION", ServerType.MASTER, 250, null);
      decisionList = (List<BalancerDecision>)(List<?>)admin.getLogEntries(null, "BALANCER_DECISION", ServerType.MASTER, 250, null);
    }
  }

      out.write('\n');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("pageTitle", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageTitle}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null), request.getCharacterEncoding()), out, false);
      out.write("\n\n\n<div class=\"container-fluid content\">\n  <div class=\"row\">\n    <div class=\"page-header\">\n    <h2>Operations Details</h2>\n    <p>HBase uses some fixed-size ring buffers to maintain rolling window history of specific server-side operation details.\n    This page list all operation details retrieve from these ring buffers</p>\n    </div>\n    </div>\n<div class=\"tabbable\">\n  <ul class=\"nav nav-pills\">\n    <li class=\"active\">\n      <a href=\"#tab_named_queue1\" data-toggle=\"tab\"> Balancer Rejection </a>\n    </li>\n    <li class=\"\">\n          <a href=\"#tab_named_queue2\" data-toggle=\"tab\"> Balancer Decision </a>\n    </li>\n  </ul>\n    <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n      <div class=\"tab-pane active\" id=\"tab_named_queue1\">\n      <p>Balancer Rejection explain why balancer is skipping runs and explain all factors considered</p>\n        <table class=\"table table-striped\">\n          <tr>\n            <th>Reason</th>\n            <th>CostFunctions Details</th>\n          </tr>\n");
      out.write("          ");
 if (logList == null) { 
      out.write("\n          ");
 } else { 
      out.write("\n            ");
 for (BalancerRejection entry: logList) {  
      out.write("\n              <tr>\n                <td>");
      out.print(entry.getReason());
      out.write("</td>\n                <td>\n                ");
 List<String> costFunctions = entry.getCostFuncInfoList();
                   if (costFunctions != null && !costFunctions.isEmpty()) { 
      out.write("\n                  <table>\n                  ");
 for (String costFunctionInfo: entry.getCostFuncInfoList() ) { 
      out.write("\n                    <tr><td>");
      out.print( costFunctionInfo );
      out.write("</td></tr>\n                  ");
 }
      out.write("\n                  </table>\n                  ");
 } 
      out.write("\n                </td>\n              </tr>\n            ");
 } 
      out.write("\n          ");
 } 
      out.write("\n          </table>\n      </div>\n      <div class=\"tab-pane\" id=\"tab_named_queue2\">\n      <p>Balancer Decision displayed the history of decision(factor details and weights and costs) made by LoadBalancers</p>\n          <table class=\"table table-striped\">\n            <tr>\n              <th>Initial Function Costs</th>\n              <th>Final Function Costs</th>\n              <th>Init Total Cost</th>\n              <th>Computed Total Cost</th>\n              <th>Computed Steps</th>\n              <th>Region Plans</th>\n            </tr>\n            ");
 if (decisionList == null) { 
      out.write("\n            ");
 } else { 
      out.write("\n              ");
 for (BalancerDecision decision: decisionList) {  
      out.write("\n                <tr>\n                  <td>");
      out.print(decision.getInitialFunctionCosts());
      out.write("</td>\n                  <td>");
      out.print(decision.getFinalFunctionCosts());
      out.write("</td>\n                  <td>");
      out.print(StringUtils.format("%.2f", decision.getInitTotalCost()));
      out.write("</td>\n                  <td>");
      out.print(StringUtils.format("%.2f", decision.getComputedTotalCost()));
      out.write("</td>\n                  <td>");
      out.print(decision.getComputedSteps());
      out.write("</td>\n                  ");

                  List<String> regionPlans = decision.getRegionPlans();
                  if ( regionPlans == null) {
      out.write("\n                    <td></td>\n                  ");
 }  else { 
      out.write("\n                    <td>\n                    <table>\n                    ");
 for (String plan : regionPlans) { 
      out.write("\n                      <tr><td>");
      out.print(plan);
      out.write("</td></tr>\n                    ");
 } 
      out.write("\n                    </table>\n                    </td>\n                  ");
 } 
      out.write("\n                </tr>\n              ");
 } 
      out.write("\n            ");
 } 
      out.write("\n        </div>\n      </div>\n  </div>\n</div>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
